@model PuntoDeVenta.Models.Clientes

@{
    ViewBag.Title = "Editar";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="col-md-12 text-align-center">
    <h4 class="titulo1">Editar Clientes</h4>
    <p class="lead">
        Edita o agrega datos faltantes del cliente.
    </p>
        </div>
    <hr />
    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <div class="container">
            <div class="row justify-content-md-center">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-body">
                            <div class="form-group">
                                @Html.LabelFor(model => model.NumCliente, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.NumCliente, new { htmlAttributes = new { @class = "form-control formulario1", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.NumCliente, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control formulario1" } })
                                    @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Apellidos, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.Apellidos, new { htmlAttributes = new { @class = "form-control formulario1" } })
                                    @Html.ValidationMessageFor(model => model.Apellidos, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.EmailCliente, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.EmailCliente, new { htmlAttributes = new { @class = "form-control formulario1" } })
                                    @Html.ValidationMessageFor(model => model.EmailCliente, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.AddressCliente, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.AddressCliente, new { htmlAttributes = new { @class = "form-control formulario1" } })
                                    @Html.ValidationMessageFor(model => model.AddressCliente, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.PhoneCliente, htmlAttributes: new { @class = "control-label col-md-12" })
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.PhoneCliente, new { htmlAttributes = new { @class = "form-control formulario1", type = "tel" } })
                                    @Html.ValidationMessageFor(model => model.PhoneCliente, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            @Html.HiddenFor(model => model.DateTCliente)
                            @Html.HiddenFor(model => model.StatusCliente)
                            @Html.HiddenFor(model => model.IdCajero)

                            <div class="form-group">
                                <div class="col-md-12">
                                    <input type="submit" value="Guardar" class="btn btn-success botonaceptar" />
                                </div>
                            </div>
                            <div>
                                @Html.ActionLink("Regresar a la lista", "Index", routeValues: null, htmlAttributes: new { @Class = "link1 " })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@Html.Partial("_LoginAdmin")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        // Vanilla Javascript
        var input = document.querySelector("#PhoneCliente");
        window.intlTelInput(input, ({
            // options here
            // whether or not to allow the dropdown
            allowDropdown: true,

            // if there is just a dial code in the input: remove it on blur, and re-add it on focus
            autoHideDialCode: true,

            // add a placeholder in the input with an example number for the selected country
            autoPlaceholder: "polite",

            // modify the auto placeholder
            customPlaceholder: null,

            // append menu to specified element
            dropdownContainer: null,

            // don't display these countries
            excludeCountries: [],

            // format the input value during initialisation and on setNumber
            formatOnDisplay: true,

            // geoIp lookup function
            geoIpLookup: null,

            // inject a hidden input with this name, and on submit, populate it with the result of getNumber
            hiddenInput: "",

            // initial country
            initialCountry: "",

            // localized country names e.g. { 'de': 'Deutschland' }
            localizedCountries: null,

            // don't insert international dial codes
            nationalMode: true,

            // display only these countries
            onlyCountries: [],

            // number type to use for placeholders
            placeholderNumberType: "MOBILE",

            // the countries at the top of the list. defaults to united states and united kingdom
            preferredCountries: ["gt"],

            // display the country dial code next to the selected flag so it's not part of the typed number
            separateDialCode: true,

            // specify the path to the libphonenumber script to enable validation/formatting
            utilsScript: ""
        }));

        input.addEventListener("countrychange", function () {
            // do something with iti.getSelectedCountryData()
        });

        input.addEventListener("open:countrydropdown", function () {
            // triggered when the user opens the dropdown
        });

        input.addEventListener("close:countrydropdown", function () {
            // triggered when the user closes the dropdown
        });
    </script>

    <script>
        $(document).ready(function () {

            $(function () {
                $("#exampleModalLong").modal("show");
            });

            $("#comprobar").on("click", function (e) {

                var model = new Object();
                model.Password = $("#Password").val();

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("LoginAdmin", "Account")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify(model),
                    success: function (result) {
                        if (result.Success == 'true') {
                            $("#exampleModalLong").modal("hide");
                        } else if (result.Success == 'false') {
                            $('#errors').html("<li>" + result.Error + "</li>");
                        }
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            });
        });
    </script>

}
